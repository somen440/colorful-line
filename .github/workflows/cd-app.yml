name: App CD

on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: colorful-line
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-northeast1
  IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID }}/colorful-line:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Configure docker to use the gcloud cli
        run: gcloud auth configure-docker --quiet
      - name: Perl Cache (App)
        uses: actions/cache@v2
        with:
          path: app/ColorfulLine/local
          key: perl-${{ hashFiles('app/ColorfulLine/**/cpanfile') }}
          restore-keys: |
            perl-
      - name: setup
        working-directory: app/ColorfulLine
        run: make setup
      - name: Build, tag, and push image to Amazon ECR
        working-directory: app
        run: |
          docker build -f Dockerfile.release -t $IMAGE .
          docker push $IMAGE
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE \
            --project $GCP_PROJECT_ID \
            --region $GCP_REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=5000 \
            --set-env-vars=\
              DB_NAME=colorful,\
              DB_HOST=$DB_HOST,\
              DB_PORT=$DB_PORT,\
              DB_USER=$DB_USER,\
              DB_PASSWORD=$DB_PASSWORD \
            --quiet
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  notice_success:
    if: success()
    needs: [deploy]

    runs-on: ubuntu-latest

    steps:
      - name: Success CI
        uses: tokorom/action-slack-incoming-webhook@master
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "${{ github.workflow }} 成功したよ:eyes:"
          attachments: |
            [
              {
                "color": "good",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "title": "PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }} success",
                "title_link": "${{ github.event.pull_request._links.html.href }}",
                "footer": "timestamp: ${{ github.event.pull_request.updated_at }}"
              }
            ]

  notice_failure:
    if: failure()
    needs: [deploy]

    runs-on: ubuntu-latest

    steps:
      - name: Failure CI
        uses: tokorom/action-slack-incoming-webhook@master
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "<!channel> ${{ github.workflow }} 失敗したよ:eyes:"
          attachments: |
            [
              {
                "color": "danger",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "title": "PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }} failure",
                "title_link": "${{ github.event.pull_request._links.html.href }}",
                "footer": "timestamp: ${{ github.event.pull_request.updated_at }}"
              }
            ]
